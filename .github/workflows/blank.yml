`timescale 1ns / 1ps


module Motor_A(
    input clk, // clock 100MHz
    input [1:0] Direction, // Switch 1-2 used for motor A direction 
    input [3:0] Speed, // Switch 3-6 used for motor A speed 
    input Comparator,
    input Comparator_B,
    
    output reg PWM, // PWM signal  JA1 pin to ENA
    output reg Forward, // 3.3V  JA2 pin to IN2
    output reg Backward // 3.3V  JA3 pin to IN1
    );
    
reg [11:0] Counter; // 12-bit counter for PWM
reg [11:0] Width; // 12-bit width for PWM
reg Enable; // Enabling Speed register
reg Enable_1;       
        
initial begin
    // Set all registers to 0 and 1
    Counter = 0;
    Width = 0;
    Enable = 0;
    Enable_1 = 0;
end

always@(posedge clk) begin
    //value = 100Mhz/(2*desired Frequency) - 1
    //ourvalue needed : 2499!
    if (Counter < 4000) Counter <= Counter + 1;
    else Counter <= 0;
    
    if (Counter < Width) PWM <= 1; 
    else PWM <= 0; 
    
end

wire [1:0] Refresh;
assign Refresh = Counter[11:10];

always @ (posedge clk) begin
    case(Comparator)
        1'b0: begin
            Enable = 1;
        end 
        1'b1: begin
            Enable = 0;
        end
    endcase
end

always @ (posedge clk) begin
    case(Comparator_B)
        1'b0: begin
            Enable_1 = 1;
        end 
        1'b1: begin
            Enable_1 = 0;
        end
    endcase
end




always @ (posedge clk) begin
        // case statements 
        case(Direction)
            2'b01 : begin 
                Forward = 1;
                Backward = 0;
            end   
            2'b10 : begin
                Forward = 0;
                Backward = 1;
            end
            default : begin
                Forward = 0;
                Backward = 0;
            end
        endcase   
  
         if (Enable == 1 && Enable_1 ==1)
             case(Speed)
               4'b0001: Width = 12'd1000; 
               4'b0010: Width = 12'd2000; 
               4'b0100: Width = 12'd3000; 
               4'b1000: Width = 12'd4000; 
               default:   Width = 12'd0;                
             endcase       
         else
             Width = 12'd0;
              
end      


endmodule
